{
  "hash": "5707519d4ef0a2137fc1cc5ca3bff320",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Theming Quarto\"\nformat: \n  revealjs:\n    transition: fade\n    background-transition: fade\n    theme: ../style.scss\n    footer: <https://bit.ly/gasp2025-quarto>\nfilters:\n  - reveal-auto-agenda\n---\n\n## HTML Theming {.scrollable}\n\nQuarto includes 25 themes from the [Bootswatch](https://bootswatch.com/) project:\n\n-   default\n-   cerulean\n-   cosmo\n-   cyborg\n-   darkly\n-   flatly\n-   journal\n-   litera\n-   lumen\n-   lux\n-   materia\n-   minty\n-   morph\n-   pulse\n-   quartz\n-   sandstone\n-   simplex\n-   sketchy\n-   slate\n-   solar\n-   spacelab\n-   superhero\n-   united\n-   vapor\n-   yeti\n-   zephyr\n\n## How to Apply HTML Theming\n\nProvide the custom theme under `theme` in the YAML heading:\n\n````{.markdown filename=\"my-document.qmd\"}\n---\ntheme:\n  - flatly\n---\n````\n\n## However, we usually want to use our organization's theme\n\n![](../images/flyer.png){fig-align=\"center\" width=\"40%\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n## Introducing brand.yml\n\n![](../images/brand-yml.png){fig-align=\"center\" width=\"50%\"}\n\nCreate reports, apps, dashboards, plots and more that match your company’s brand guidelines with a single `_brand.yml` file.\n\n::: aside\n[brand.yml documentation](https://posit-dev.github.io/brand-yml/), [Quarto documentation](https://quarto.org/docs/authoring/brand.html)\n:::\n::: notes\nbrand.yml is a simple, portable YAML file that codifies your company’s brand guidelines into a format that can be used by Quarto, Python and R tooling to create branded outputs. Our goal is to support unified, branded theming for all of Posit’s open source tools—from web applications to printed reports to dashboards and presentations—with a consistent look and feel.\n:::\n\n## brand.yml elements\n\n* `meta`: Identifying information, name of the company, URLs, etc.\n* `logo`: Files or links to the brand’s logos.\n* `color`: Colors in the brand's color palette. \n* `typography`: Fonts for different elements. \n* `defaults`: Additional context-specific settings.\n\n## `_brand.yml` structure\n\n```{.yaml code-line-numbers=\"1-4|6-7|9-20|22-39\" filename=\"_brand.yml\"}\nmeta: \n  name: Example Company\n  link: \n    github: https://github.com/example-company\n\nlogo: \n  medium: logos/logo.png\n\ncolor:\n  palette:\n    black: \"#1C2826\"\n    blue: \"#0C0A3E\" \n    neutral: \"#F9F7F1\" \n    red: \"#BA274A\"\n    violet: \"#4D6CFA\"\n  background: neutral\n  foreground: black\n  primary: blue\n  secondary: violet\n  danger: red\n\ntypography:\n  fonts:\n    - family: Nunito Sans\n      source: google\n    - family: Montserrat\n      source: google\n    - family: Fira Code\n      source: google\n\n  base: Nunito Sans\n  headings:\n    family: Montserrat\n    weight: 700\n    color: primary\n  monospace: Fira Code\n  link:\n    color: danger\n    decoration: underline\n```\n\n## How to apply brand.yml automatically\n\n1. Define branding in a single` _brand.yml` file.\n2. Save in the root directory of your Quarto project (alongside `_quarto.yml`)\n\nQuarto will detect the presence of `_brand.yml` and automatically apply the brand to all documents of the supported formats in the project.\n\n## Specify light and dark themes for documents\n\nYou can now specify a light and dark brand for documents. For example, at a project-level you can provide two brand files:\n\n```{.yaml filename=\"_quarto.yml\"}\nbrand:\n  light: light-brand.yml\n  dark: dark-brand.yml\n```\n\n(Note: this is not available in reveal.js).\n\n## Specify light and dark themes for plots\n\nYou can use `renderings` to provide light and dark versions of a plot:\n\n````{.markdown filename=\"my-document.qmd\" code-line-numbers=\"4-6|10\"}\n---\nformat: \n  html:\n    theme:\n      light: cosmo\n      dark: darkly\n---\n\n```{{python}}\n#| renderings: [light, dark]\n(ggplot(purpose_data, aes(x='reorder(primary_purpose, n)', y='n')) +\n geom_col(fill='forestgreen', alpha=0.8) +\n geom_text(aes(label='label'), ha='left', size=8) +\n coord_flip() +\n scale_y_continuous(labels=lambda x: [f\"{int(i/1000)}k\" if i >= 1000 else str(int(i)) for i in x]) +\n labs(title=\"Recreation Dominates American Dam Purposes\",\n      subtitle=\"Top 10 primary purposes for the nation's 92,428 dams\",\n      x=\"Primary Purpose\",\n      y=\"Number of Dams\",\n      caption=\"Source: National Inventory of Dams\") +\n theme_dam)\n```\n````\n\n## Your turn {background-color='{{< brand color pink >}}'}\n\nIn the workshop repo, there is a file called `04-exercise.yml`. Rename the file to `_brand.yml` and rerender your Quarto document.\n\nChange some of the variables in the `_brand.yml` file and rerender to see how your theme changes.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_9d273481\" data-warn-when=\"60\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}